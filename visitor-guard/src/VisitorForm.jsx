import React, { useState, useEffect } from 'react';
import { Panel, Input, SelectPicker, Button, Row, Col, Container, Loader, Placeholder } from 'rsuite';
import Checkbox from '@mui/material/Checkbox';
import Swal from 'sweetalert2'; // Import SweetAlert2
import { useNavigate } from 'react-router-dom'; // Import the useNavigate hook
import './visitor.css'
const VisitorForm = () => {
    const [loading, setLoading] = useState(false);
    const navigate = useNavigate(); // Initialize navigate
    const [acceptedTerms, setAcceptedTerms] = useState(false); // State for checkbox
    const [selectedPurpose, setSelectedPurpose] = useState(null); // State for selected purpose
    const [companyName, setCompanyName] = useState('');
    const [vehicleRegistration, setVehicleRegistration] = useState('');
    const [visitorName, setVisitorName] = useState(''); // State for visitor name
    const [visitorPhone, setVisitorPhone] = useState('');
    const [contactPerson, setContactPerson] = useState(''); // State for contact person
    const [reason, setReason] = useState(''); // State for reason
    const [errorMessage, setErrorMessage] = useState(''); // State for error messages

    const purposeOptions = [
        { label: '‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠/‡∏™‡πÇ‡∏ï‡∏£‡πå', value: 'group_A' },
        { label: '‡πÇ‡∏Ñ‡∏£‡∏≤‡∏ä/QC', value: 'group_B' },
        { label: 'Sales ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏á‡∏≤‡∏ô', value: 'group_C' },
        { label: 'Sales Delivery', value: 'group_D' },
        { label: '‡∏≠‡∏∑‡πà‡∏ô‡πÜ/‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏®', value: 'group_Z' },
    ];

    useEffect(() => {
        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô title ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤
        document.title = "Form - SAMT Visitor";

        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Favicon
        const favicon = document.querySelector("link[rel='icon']") || document.createElement('link');
        favicon.rel = 'icon';
        //favicon.href = '/path/to/login-favicon.ico'; // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô path ‡∏Ç‡∏≠‡∏á favicon ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
        document.head.appendChild(favicon);

        // Cleanup function ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å unmount
        /*   return () => {
              document.title = "SAMT Visitor"; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô title ‡πÄ‡∏î‡∏¥‡∏°
              favicon.href = '/path/to/default-favicon.ico'; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô favicon ‡πÄ‡∏î‡∏¥‡∏°
          }; */
    }, []);
    const LINE_GROUP_IDS = {
        group_A: 'C627116cbe6564839ed6d036568e116cd',
        group_B: 'C6e145dbd339fd35d70e9db15cd972757',
        group_C: 'C799d938010665673df14809a3318b266',
        group_D: 'Cfa2b6d33aed1d234d3c3a532a1c762d1',
        group_Z: 'C2f416f38bf38fb7ace35202e79754bcd',
    };


    const TELEGRAM_GROUP_IDS = {
        group_A: '-4598355637',
        group_B: '-4507567485',
        group_C: '-4538116513',
        group_D: '-4598867780',
        group_Z: '-4565889227',
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á label ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏à‡∏≤‡∏Å value ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const getPurposeLabel = (value) => {
        const purpose = purposeOptions.find(option => option.value === value);
        return purpose ? purpose.label : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå';
    };
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° LINE
    const sendMessageToLineGroup = async (groupId, visitorData) => {
        try {
            const purposeLabel = getPurposeLabel(visitorData.purpose);

            const message =
                `Visitor ${purposeLabel}\n
‚Äî ‡∏Ñ‡∏∏‡∏ì ${visitorData.name} 
‚Äî ‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ${visitorData.companyName} 
‚Äî ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏ö ${visitorData.contactPerson}\n
üîó Link: https://system-samt.com/visitor-guard/dashboard`;

            const response = await fetch('https://visitor.system-samt.com/api/line-message', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    groupId,
                    message,
                }),
            });

            if (!response.ok) {
                throw new Error('Failed to send message');
            }

            const data = await response.json();
            console.log('Message sent to LINE group successfully:', data);
        } catch (error) {
            console.error('Error sending message to LINE:', error);
        }
    };

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° Telegram
    const sendMessageToTelegramGroup = async (groupId, visitorData) => {
        try {
            const purposeLabel = getPurposeLabel(visitorData.purpose);

            const message =
                `Visitor ${purposeLabel}\n
‚Äî ‡∏Ñ‡∏∏‡∏ì ${visitorData.name} 
‚Äî ‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ${visitorData.companyName} 
‚Äî ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏ö ${visitorData.contactPerson}\n
üîó Link: https://system-samt.com/visitor-guard/dashboard`;

            const response = await fetch('https://visitor.system-samt.com/api/telegram-message', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    groupId,
                    message,
                }),
            });

            if (!response.ok) {
                throw new Error('Failed to send message to Telegram');
            }

            const data = await response.json();
            console.log('Message sent to Telegram group successfully:', data);
        } catch (error) {
            console.error('Error sending message to Telegram:', error);
        }
    };

    const handleSubmit = async () => {
        // Validate required fields
        if (!visitorName || !visitorPhone || !companyName || !selectedPurpose || !vehicleRegistration || !contactPerson) {
            Swal.fire({
                icon: 'warning',
                title: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô',
                text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô',
                confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
            });
            return;
        }

        // Get the corresponding group ID for the selected purpose
        const groupId = LINE_GROUP_IDS[selectedPurpose];
        const telegramGroupId = TELEGRAM_GROUP_IDS[selectedPurpose];


        if (!groupId) {
            Swal.fire({
                icon: 'warning',
                title: '‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
                text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
                confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
            });
            return;
        }
        setLoading(true); // ‡πÅ‡∏™‡∏î‡∏á Loader

        try {
            const visitorData = {
                name: visitorName,
                phone: visitorPhone,
                companyName,
                purpose: selectedPurpose,
                vehicleRegistration,
                contactPerson,
                reason,
            };

            const response = await fetch('https://visitor.system-samt.com/api/visitor', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(visitorData),
            });

            const data = await response.json();
            if (!response.ok) {
                throw new Error(data.message || 'Failed to create visitor');
            }

            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
            await sendMessageToLineGroup(groupId, visitorData);
            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Telegram ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
            await sendMessageToTelegramGroup(telegramGroupId, visitorData);

            setLoading(false); // ‡∏ã‡πà‡∏≠‡∏ô Loader

            Swal.fire({
                icon: 'success',
                title: '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
                text: data.message,
                confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á',
            }).then(() => {
                navigate('/visitor-guard/Welcome', {
                    state: {
                        name: visitorName,
                        time: new Date().toLocaleString('th-TH'),
                    },
                });
            });

        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!',
                text: error.message,
                confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á',
            });
        }
    };


    return (
        <>

            <Container>

                <div style={{ alignItems: 'center', display: 'flex', flexDirection: 'column', marginTop: '20px' }}>
                    <h4>‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å</h4>
                    <h4>Registration for external visitors</h4>
                </div>
                <Panel scrollShadow style={{ position: 'relative' }} >
                    <div style={{ padding: '20px' }}>
                        {errorMessage && <Message type="error">{errorMessage}</Message>}
                        <Row gutter={16}>
                            <Col xs={24} sm={12}>
                                <div className="form-group">
                                    <label style={{ marginBottom: '8px' }}>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•/Full name</label>
                                    <Input
                                        placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                                        style={{ marginBottom: '20px' }}
                                        value={visitorName}
                                        onChange={(value) => setVisitorName(value)}
                                    />
                                </div>
                            </Col>

                            <Col xs={24} sm={12}>
                                <div className="form-group">
                                    <label style={{ marginBottom: '8px' }}>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£/Tel</label>
                                    <Input
                                        type="tel"
                                        placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"
                                        style={{ marginBottom: '20px' }}
                                        value={visitorPhone}
                                        onChange={(value) => {
                                            if (/^\d*$/.test(value)) {
                                                setVisitorPhone(value);
                                            }
                                        }}
                                    />
                                </div>
                            </Col>

                        </Row>
                        <Row gutter={16}>
                            <Col xs={24} sm={12}>
                                <div className="form-group">
                                    <label style={{ marginBottom: '8px' }}>‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó/Company</label>
                                    <Input
                                        placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó"
                                        style={{ marginBottom: '20px' }}
                                        value={companyName}
                                        onChange={(value) => setCompanyName(value)}
                                    />
                                </div>
                            </Col>
                            <Col xs={24} sm={12}>
                                <div className="form-group">
                                    <label style={{ marginBottom: '8px' }}>‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠/Contact Person</label>
                                    <Input
                                        placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠"
                                        style={{ marginBottom: '20px' }}
                                        value={contactPerson}
                                        onChange={(value) => setContactPerson(value)}
                                    />
                                </div>
                            </Col>
                        </Row>
                        <Row gutter={16}>
                            <Col xs={24} sm={12}>
                                <div className="form-group">
                                    <label style={{ marginBottom: '8px' }}>‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå/Purpose</label>
                                    <SelectPicker
                                        data={purposeOptions}
                                        searchable={false}
                                        placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå"
                                        style={{ width: '100%', marginBottom: '20px' }}
                                        onChange={(value) => setSelectedPurpose(value)}
                                        value={selectedPurpose}
                                    />
                                </div>
                            </Col>
                            <Col xs={24} sm={12}>
                                <div className="form-group">
                                    <label style={{ marginBottom: '8px' }}>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏≤/Purpose of visit</label>
                                    <Input
                                        as="textarea"
                                        placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•"
                                        style={{ resize: 'none', marginBottom: '20px' }}
                                        rows={3}
                                        value={reason}
                                        onChange={(value) => setReason(value)}
                                    />
                                </div>
                            </Col>
                        </Row>
                        <Col xs={24} sm={12}>
                            <div className="form-group">
                                <label style={{ marginBottom: '8px' }}>‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ/Vehicle registration number</label>
                                <Input
                                    placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ"
                                    style={{ marginBottom: '20px' }}
                                    value={vehicleRegistration}
                                    onChange={(value) => setVehicleRegistration(value)}
                                />
                            </div>
                        </Col>
                    </div>

                </Panel>
                <Panel>
                    <div style={{ marginBottom: '20px', maxHeight: '400px', overflowY: 'auto' }}>
                        <h4>‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç / Terms and Conditions</h4>
                        <ul>
                            <li>1. ‡∏ú‡∏π‡πâ‡∏°‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ö‡∏±‡∏ï‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤. / Visitors must wear a visitor badge at all times.</li>
                            <li>2. ‡∏ú‡∏π‡πâ‡∏°‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô. / Visitors are allowed access only to areas with permission.</li>
                            <li>3. ‡∏ú‡∏π‡πâ‡∏°‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡πà‡∏á‡∏Ñ‡∏£‡∏±‡∏î. / Visitors must strictly adhere to the company's safety regulations.</li>
                            <li>4. ‡∏ú‡∏π‡πâ‡∏°‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•. / Visitors consent to the recording of personal information.</li>
                        </ul>
                        <Checkbox
                            checked={acceptedTerms}
                            onChange={() => setAcceptedTerms(!acceptedTerms)}
                            sx={{ '& .MuiSvgIcon-root': { fontSize: 28 } }}
                        />
                        <span style={{ fontWeight: 'bold' }}> {/* ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô span */}
                            ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏ß‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢. / For the purposes declared by the company regarding safety.
                        </span>
                    </div>




                    <Button
                        appearance="primary"
                        style={{
                            marginTop: '40px',
                            bottom: '20px',
                            left: '20px',
                            right: '20px',
                            width: 'calc(100% - 40px)',
                            display: 'block',
                        }}
                        disabled={!acceptedTerms}
                        onClick={handleSubmit}
                    >
                        ‡∏ï‡∏Å‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
                        {loading && <Loader backdrop content="loading..." />}
                    </Button>
                </Panel>
            </Container >
        </>
    );
};

export default VisitorForm;
